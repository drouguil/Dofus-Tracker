import { PacketProtocol } from "../controllers/PacketProtocol";
import { FriendInfosProtocol } from "../controllers/protocols/FriendInfosProtocol";
import { FriendOnlineInfosProtocol } from "../controllers/protocols/FriendOnlineInfosProtocol";
import { Packet } from "../models/packets/Packet";
import { EntityLookProtocol } from "../controllers/protocols/EntityLookProtocol";
import { CharacterBaseInfosProtocol } from "../controllers/protocols/CharacterBaseInfosProtocol";
import { PaddockContentInfosProtocol } from "../controllers/protocols/PaddockContentInfosProtocol";
import { MountInfosForPaddockProtocol } from "../controllers/protocols/MountInfosForPaddockProtocol";
import { QuestActiveInfosProtocol } from "../controllers/protocols/QuestActiveInfosProtocol";
import { SpellItemProtocol } from "../controllers/protocols/SpellItemProtocol";
import { HouseInfosProtocol } from "../controllers/protocols/HouseInfosProtocol";
import { EntityDispositionInfosProtocol } from "../controllers/protocols/EntityDispositionInfosProtocol";
import { GameRolePlayActorInfosProtocol } from "../controllers/protocols/GameRolePlayActorInfosProtocol";
import { InteractiveElementProtocol } from "../controllers/protocols/InteractiveElementProtocol";
import { InteractiveElementSkillProtocol } from "../controllers/protocols/InteractiveElementSkillProtocol";
import { StatedElementProtocol } from "../controllers/protocols/StatedElementProtocol";
import { MapObstacleProtocol } from "../controllers/protocols/MapObstacleProtocol";
import { FightCommonInfosProtocol } from "../controllers/protocols/FightCommonInfosProtocol";
import { FightOptionsInfosProtocol } from "../controllers/protocols/FightOptionsInfosProtocol";
import { FightTeamInfosProtocol } from "../controllers/protocols/FightTeamInfosProtocol";
import { FightTeamMemberInfosProtocol } from "../controllers/protocols/FightTeamMemberInfosProtocol";
import { IdentifiedEntityDispositionInfosProtocol } from "../controllers/protocols/IdentifiedEntityDispositionInfosProtocol";
import { GameFightFighterInfosProtocol } from "../controllers/protocols/GameFightFighterInfosProtocol";
import { GameFightMinimalStatsProtocol } from "../controllers/protocols/GameFightMinimalStatsProtocol";
import { FightResultListEntryProtocol } from "../controllers/protocols/FightResultListEntryProtocol";
import { FightLootProtocol } from "../controllers/protocols/FightLootProtocol";
import { NamedPartyTeamWithOutcomeProtocol } from "../controllers/protocols/NamedPartyTeamWithOutcomeProtocol";
import { NamedPartyTeamProtocol } from "../controllers/protocols/NamedPartyTeamProtocol";
import { ActorRestrictionsInfosProtocol } from "../controllers/protocols/ActorRestrictionsInfosProtocol";
import { GameFightCharacterInfosProtocol } from "../controllers/protocols/GameFightCharacterInfosProtocol";
import { PlayerStatusProtocol } from "../controllers/protocols/PlayerStatusProtocol";
import { ActorAlignmentInfosProtocol } from "../controllers/protocols/ActorAlignmentInfosProtocol";
import { FightEntityDispositionInfosProtocol } from "../controllers/protocols/FightEntityDispositionInfosProtocol";
import { GameFightFighterNamedInfosProtocol } from "../controllers/protocols/GameFightFighterNamedInfosProtocol";
import { GameFightMinimalStatsPreparationProtocol } from "../controllers/protocols/GameFightMinimalStatsPreparationProtocol";
import { GameContextActorInfosProtocol } from "../controllers/protocols/GameContextActorInfosProtocol";
import { FightTeamMemberCharacterInfosProtocol } from "../controllers/protocols/FightTeamMemberCharacterInfosProtocol";
import { GameFightAIInfosProtocol } from "../controllers/protocols/GameFightAIInfosProtocol";
import { GameFightMonsterInfosProtocol } from "../controllers/protocols/GameFightMonsterInfosProtocol";
import { FightTeamMemberMonsterInfosProtocol } from "../controllers/protocols/FightTeamMemberMonsterInfosProtocol";
import { GameRolePlayGroupMonsterInfosProtocol } from "../controllers/protocols/GameRolePlayGroupMonsterInfosProtocol";
import { GroupMonsterStaticInfosProtocol } from "../controllers/protocols/GroupMonsterStaticInfosProtocol";
import { MonsterInGroupInfosProtocol } from "../controllers/protocols/MonsterInGroupInfosProtocol";
import { MonsterInGroupLightInfosProtocol } from "../controllers/protocols/MonsterInGroupLightInfosProtocol";
import { IdolProtocol } from "../controllers/protocols/IdolProtocol";
import { AbstractFightDispellableEffectProtocol } from "../controllers/protocols/AbstractFightDispellableEffectProtocol";
import { GameFightSpellCooldownProtocol } from "../controllers/protocols/GameFightSpellCooldownProtocol";
import { FightTemporaryBoostEffectProtocol } from "../controllers/protocols/FightTemporaryBoostEffectProtocol";
import { FightTemporarySpellBoostEffectProtocol } from "../controllers/protocols/FightTemporarySpellBoostEffectProtocol";
import { FightDispellableEffectExtendedInfosProtocol } from "../controllers/protocols/FightDispellableEffectExtendedInfosProtocol";
import { FightTriggeredEffectProtocol } from "../controllers/protocols/FightTriggeredEffectProtocol";
import { FightTemporaryBoostWeaponDamagesEffectProtocol } from "../controllers/protocols/FightTemporaryBoostWeaponDamagesEffectProtocol";
import { FightTemporaryBoostStateEffectProtocol } from "../controllers/protocols/FightTemporaryBoostStateEffectProtocol";
import { CharacterSpellModificationProtocol } from "../controllers/protocols/CharacterSpellModificationProtocol";
import { FightResultFighterListEntryProtocol } from "../controllers/protocols/FightResultFighterListEntryProtocol";
import { FightResultMutantListEntryProtocol } from "../controllers/protocols/FightResultMutantListEntryProtocol";
import { SubEntityProtocol } from "../controllers/protocols/SubEntityProtocol";
import { ActorExtendedAlignmentInfosProtocol } from "../controllers/protocols/ActorExtendedAlignmentInfosProtocol";
import { CharacterBaseCharacteristicProtocol } from "../controllers/protocols/CharacterBaseCharacteristicProtocol";
import { CharacterCharacteristicsInfosProtocol } from "../controllers/protocols/CharacterCharacteristicsInfosProtocol";
import { AchievementAchievedProtocol } from "../controllers/protocols/AchievementAchievedProtocol";

class ProtocolManager {
    public protocols: typeof PacketProtocol[];

    constructor() {
        this.protocols = new Array();
        this.protocols[4] = CharacterBaseCharacteristicProtocol;
        this.protocols[6] = FightTeamMemberMonsterInfosProtocol;
        this.protocols[8] = CharacterCharacteristicsInfosProtocol;
        this.protocols[13] = FightTeamMemberCharacterInfosProtocol;
        this.protocols[16] = FightResultListEntryProtocol;
        this.protocols[20] = FightOptionsInfosProtocol;
        this.protocols[29] = GameFightMonsterInfosProtocol;
        this.protocols[31] = GameFightMinimalStatsProtocol;
        this.protocols[33] = FightTeamInfosProtocol;
        this.protocols[41] = FightLootProtocol;
        this.protocols[43] = FightCommonInfosProtocol;
        this.protocols[44] = FightTeamMemberInfosProtocol;
        this.protocols[45] = CharacterBaseInfosProtocol;
        this.protocols[46] = GameFightCharacterInfosProtocol;
        this.protocols[49] = SpellItemProtocol;
        this.protocols[54] = SubEntityProtocol;
        this.protocols[55] = EntityLookProtocol;
        this.protocols[60] = EntityDispositionInfosProtocol;
        this.protocols[78] = FriendInfosProtocol;
        this.protocols[80] = InteractiveElementProtocol;
        // this.protocols[85] = GameActionMarkedCellProtocol;
        this.protocols[92] = FriendOnlineInfosProtocol;
        this.protocols[107] = IdentifiedEntityDispositionInfosProtocol;
        this.protocols[108] = StatedElementProtocol;
        this.protocols[111] = HouseInfosProtocol;
        this.protocols[140] = GroupMonsterStaticInfosProtocol;
        this.protocols[141] = GameRolePlayActorInfosProtocol;
        this.protocols[143] = GameFightFighterInfosProtocol;
        this.protocols[144] = MonsterInGroupInfosProtocol;
        this.protocols[150] = GameContextActorInfosProtocol;
        this.protocols[151] = GameFightAIInfosProtocol;
        this.protocols[158] = GameFightFighterNamedInfosProtocol;
        this.protocols[160] = GameRolePlayGroupMonsterInfosProtocol;
        this.protocols[183] = PaddockContentInfosProtocol;
        this.protocols[184] = MountInfosForPaddockProtocol;
        this.protocols[189] = FightResultFighterListEntryProtocol;
        this.protocols[200] = MapObstacleProtocol;
        this.protocols[201] = ActorAlignmentInfosProtocol;
        this.protocols[202] = ActorExtendedAlignmentInfosProtocol;
        this.protocols[204] = ActorRestrictionsInfosProtocol;
        this.protocols[205] = GameFightSpellCooldownProtocol;
        this.protocols[206] = AbstractFightDispellableEffectProtocol;
        this.protocols[207] = FightTemporarySpellBoostEffectProtocol;
        this.protocols[208] = FightDispellableEffectExtendedInfosProtocol;
        this.protocols[209] = FightTemporaryBoostEffectProtocol;
        this.protocols[210] = FightTriggeredEffectProtocol;
        this.protocols[211] = FightTemporaryBoostWeaponDamagesEffectProtocol;
        this.protocols[214] = FightTemporaryBoostStateEffectProtocol;
        this.protocols[215] = CharacterSpellModificationProtocol;
        this.protocols[216] = FightResultMutantListEntryProtocol;
        this.protocols[217] = FightEntityDispositionInfosProtocol;
        this.protocols[219] = InteractiveElementSkillProtocol;
        // this.protocols[351] = GameActionMarkProtocol;
        this.protocols[360] = GameFightMinimalStatsPreparationProtocol;
        this.protocols[381] = QuestActiveInfosProtocol;
        this.protocols[395] = MonsterInGroupLightInfosProtocol;
        this.protocols[514] = AchievementAchievedProtocol;
        this.protocols[415] = PlayerStatusProtocol;
        this.protocols[469] = NamedPartyTeamProtocol;
        this.protocols[470] = NamedPartyTeamWithOutcomeProtocol;
        this.protocols[489] = IdolProtocol;
    }

    public analyze(protocolId: number, packet: Packet): PacketProtocol {
        let packetProtocol: PacketProtocol;
        let protocolClass: typeof PacketProtocol = this.protocols[protocolId];
        if (protocolClass) {
            packetProtocol = new protocolClass(protocolId);
            packetProtocol.analyze(packet);
        }
        return packetProtocol;
    }
}

export const protocolManager = new ProtocolManager();